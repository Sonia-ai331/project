import telebot
import sqlite3
from telebot import types
from gigachat import GigaChat
import base64
from datetime import datetime
import os
from flask import Flask, request

# –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
CLASS_SCHEDULES = {
    # 1-4 –∫–ª–∞—Å—Å—ã
    "1A": "https://imgur.com/a/MkD9KF7",
    "2–ë": "https://imgur.com/WvXamKB",
    "3–í": "https://imgur.com/fgZr6Ti",
    "4–ê": "https://imgur.com/yHjwyDr",
    "1–ë": "https://imgur.com/hB6zBLn",
    "2–í": "https://imgur.com/mv5OZJd",
    "3–ê": "https://imgur.com/RQqprhu",
    "4–ë": "https://imgur.com/kVLseNo",
    "1–í": "https://imgur.com/1vU01mh",
    "2–ê": "https://imgur.com/f0RUxm9",
    "3–ë": "https://imgur.com/XBsQHQ0",
    "4–í": "https://imgur.com/njZEWvJ",
    
    # 5-9 –∫–ª–∞—Å—Å—ã
    "5A": "https://imgur.com/ES7hbLG",
    "6–ë": "https://imgur.com/TrnbFHl",
    "7–í": "https://imgur.com/TqBeJwY",
    "5–í": "https://imgur.com/KjweW0I",
    "6–ê": "https://imgur.com/undefined",
    "7–ë": "https://imgur.com/ejTEzy5",
    "5–ë": "https://imgur.com/DVEvnyY",
    "6–í": "https://imgur.com/OTsJkUl",
    "7–ê": "https://imgur.com/B7Uu7pY",
    "8–ê": "https://imgur.com/B7Uu7pY",
    
    # 9-11 –∫–ª–∞—Å—Å—ã
    "9–ê": "https://imgur.com/BSQunSG",
    "10–ê": "https://imgur.com/B7Uu7pY",
    "11–ê": "https://imgur.com/B7Uu7pY",
    "8–ë": "https://imgur.com/iP1wIwY",
    "9–ë": "https://imgur.com/gmxjc1X",
    "10–ë": "https://imgur.com/gmxjc1X",
    "11–ë": "https://imgur.com/gmxjc1X"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
app = Flask(__name__)
bot = telebot.TeleBot('7825701501:AAGcXwKM4uI2XIwXB_wVQrxRMzZjz4fj1N0')

BACK_BUTTON = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat
GIGACHAT_CREDENTIALS = "17e7bfac-6004-484b-ac8d-8b644321a445:96b9f86f-c54b-4939-81ae-232894ee003a"
GIGACHAT_CREDENTIALS_BASE64 = base64.b64encode(GIGACHAT_CREDENTIALS.encode()).decode()

def get_news_summary(title, content):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        with GigaChat(credentials=GIGACHAT_CREDENTIALS_BASE64, verify_ssl_certs=False) as giga:
            prompt = (
                "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –æ–±—ä–µ–¥–∏–Ω–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞. "
                "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã. –§–æ—Ä–º–∞—Ç:\n"
                "1. –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
                "2. –í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n"
                "3. –î–∞—Ç—ã/–º–µ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"–¢–µ–∫—Å—Ç: {content[:2000]}"
            )
            response = giga.chat(prompt)
            return response.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ GigaChat: {e}")
        return f"{title}. {content[:150]}..."  # Fallback

def format_date(db_date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ –ë–î –≤ dd.mm.yyyy"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        for fmt in ('%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y'):
            try:
                date_obj = datetime.strptime(db_date, fmt)
                return date_obj.strftime('%d.%m.%Y')
            except ValueError:
                continue
        return db_date  # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {db_date}: {e}")
        return db_date

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏')
    btn_announcements = types.KeyboardButton('–û–±—ä—è–≤–ª–µ–Ω–∏—è')
    btn1 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏—è')
    btn2 = types.KeyboardButton('–ó–∞—è–≤–ª–µ–Ω–∏—è')
    btn3 = types.KeyboardButton('–°–ø—Ä–∞–≤–∫–∏')
    markup.add(btn3, btn1, btn2, btn_news, btn_announcements)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–æ—Å—Ç–∏')
def show_news(message):
    try:
        conn = sqlite3.connect('news.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        try:
            cursor.execute('SELECT title, content, day FROM news ORDER BY date(day) DESC LIMIT 5')
        except sqlite3.OperationalError:
            cursor.execute('SELECT title, content, day FROM news ORDER BY day DESC LIMIT 5')
            
        news_items = cursor.fetchall()

        if news_items:
            response = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n"
            for title, content, day in news_items:
                formatted_date = format_date(day)
                summary = get_news_summary(title, content)
                
                response += (
                    f"üìå <i>{formatted_date}</i>\n"
                    f"{summary}\n\n"
                )
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    finally:
        conn.close() if 'conn' in locals() else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == '–û–±—ä—è–≤–ª–µ–Ω–∏—è')
def show_announcements(message):
    try:
        conn = sqlite3.connect('announcements.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT title, content, day FROM announcements ORDER BY day DESC LIMIT 5')
        announcements_items = cursor.fetchall()

        if announcements_items:
            response = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
            for title, content, day in announcements_items:
                formatted_date = format_date(day)
                summary = get_news_summary(title, content)
                
                response += (
                    f"üìå <i>{formatted_date}</i>\n"
                    f"{summary}\n\n"
                )
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
    finally:
        conn.close() if 'conn' in locals() else None

@bot.message_handler(func=lambda message: message.text == "–°–ø—Ä–∞–≤–∫–∏")
def handle_references(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn2 = types.KeyboardButton("–û–± –æ–±—É—á–µ–Ω–∏–∏")
    back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn2, back)
    bot.send_message(message.chat.id, text="...", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è")
def handle_schedules(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("1-4 –∫–ª–∞—Å—Å")
    btn2 = types.KeyboardButton("5-8 –∫–ª–∞—Å—Å")
    btn3 = types.KeyboardButton("9-11 –∫–ª–∞—Å—Å")
    btn4 = types.KeyboardButton("–ó–≤–æ–Ω–∫–∏")
    btn5 = types.KeyboardButton("–í–Ω–µ—É—Ä–æ—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    back = types.KeyboardButton("–ö–∞–Ω–∏–∫—É–ª—ã")
    abc = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, btn3, btn4, btn5, back, abc)
    bot.send_message(message.chat.id, text="...", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–Ω–µ—É—Ä–æ—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
def handle_extracurricular(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("1-4 –∫–ª–∞—Å—Å—ã")
    btn2 = types.KeyboardButton("5-9 –∫–ª–∞—Å—Å—ã")
    btn3 = types.KeyboardButton("9-11 –∫–ª–∞—Å—Å—ã")
    back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, btn3, back)
    bot.send_message(message.chat.id, text="...", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ó–∞—è–≤–ª–µ–Ω–∏—è")
def handle_applications(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn3 = types.KeyboardButton("–û—Ç—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ —à–∫–æ–ª—ã")
        btn4 = types.KeyboardButton("–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ 1 –∫–ª–∞—Å—Å")
        btn6 = types.KeyboardButton("–õ—å–≥–æ—Ç–Ω–æ–µ –º–µ—Ç—Ä–æ")
        abc = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn3, btn4, btn6, abc)
        bot.send_message(message.chat.id, text="...", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == "–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ 1 –∫–ª–∞—Å—Å")
def handle_enrollment(message):
    chat_id = message.chat.id
    file_path = os.path.join(BASE_DIR, "documents", "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ.pdf")
    with open(file_path, 'rb') as file:
        bot.send_document(chat_id, file)

@bot.message_handler(func=lambda message: message.text == "–û—Ç—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ —à–∫–æ–ª—ã")
def handle_expulsion(message):
    chat_id = message.chat.id
    file_path = os.path.join(BASE_DIR, "documents", "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç—á–∏—Å–ª–µ–Ω–∏–µ.pdf")
    with open(file_path, 'rb') as file:
        bot.send_document(chat_id, file)

@bot.message_handler(func=lambda message: message.text == "–õ—å–≥–æ—Ç–Ω–æ–µ –º–µ—Ç—Ä–æ")
def handle_metro_benefits(message):
    chat_id = message.chat.id
    file_path = os.path.join(BASE_DIR, "documents", "–ó–∞—è–≤–ª–µ–Ω–∏–µ –∏ –∞–Ω–∫–µ—Ç–∞ –ú–µ—Ç—Ä–æ")
    with open(file_path, 'rb') as file:
        bot.send_document(chat_id, file)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button2 = types.KeyboardButton("–°–ø—Ä–∞–≤–∫–∏")
    button3 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    btn_news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏')
    btn_announcements = types.KeyboardButton('–û–±—ä—è–≤–ª–µ–Ω–∏—è')
    btn4 = types.KeyboardButton('–ó–∞—è–≤–ª–µ–Ω–∏—è')
    markup.add(button2, button3, btn4, btn_announcements, btn_news)
    bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "1-4 –∫–ª–∞—Å—Å")
def one_to_four(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("1A")
    button2 = types.KeyboardButton("2–ê")
    button3 = types.KeyboardButton("3–ê")
    button4 = types.KeyboardButton("4–ê")
    button5 = types.KeyboardButton("1–ë")
    button6 = types.KeyboardButton("2–ë")
    button7 = types.KeyboardButton("3–ë")
    button8 = types.KeyboardButton("4–ë")
    button9 = types.KeyboardButton("1–í")
    button10 = types.KeyboardButton("2–í")
    button11 = types.KeyboardButton("3–í")
    button12 = types.KeyboardButton("4–í")
    back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, back)
    bot.send_message(message.chat.id, text="...", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "5-8 –∫–ª–∞—Å—Å")
def five_to_eight(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("5A")
        button2 = types.KeyboardButton("6–ê")
        button3 = types.KeyboardButton("7–ê")
        button4 = types.KeyboardButton("8–ê")
        button5 = types.KeyboardButton("5–ë")
        button6 = types.KeyboardButton("6–ë")
        button7 = types.KeyboardButton("7–ë")
        button8 = types.KeyboardButton("8–ë")
        button9 = types.KeyboardButton("5–í")
        button10 = types.KeyboardButton("6–í")
        button11 = types.KeyboardButton("7–í")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, back)
        bot.send_message(message.chat.id, text="...", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–Ω–∏–∫—É–ª
@bot.message_handler(func=lambda message: message.text == "–ö–∞–Ω–∏–∫—É–ª—ã")
def handle_holidays(message):
    bot.send_photo(message.chat.id, 'https://imgur.com/yj90lFJ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
@bot.message_handler(func=lambda message: message.text in ["1-4 –∫–ª–∞—Å—Å—ã", "5-9 –∫–ª–∞—Å—Å—ã", "9-11 –∫–ª–∞—Å—Å—ã"])
def handle_class_schedules(message):
    if message.text == "9-11 –∫–ª–∞—Å—Å—ã":
        bot.send_photo(message.chat.id, 'https://imgur.com/0xmzDi7')
    elif message.text == "1-4 –∫–ª–∞—Å—Å—ã":
        bot.send_photo(message.chat.id, 'https://imgur.com/GKvuDFT')
    elif message.text == "5-9 –∫–ª–∞—Å—Å—ã":
        bot.send_photo(message.chat.id, 'https://imgur.com/L75lttB')
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–æ–Ω–∫–æ–≤
@bot.message_handler(func=lambda message: message.text == "–ó–≤–æ–Ω–∫–∏")
def handle_bells(message):
    bot.send_photo(message.chat.id, 'https://imgur.com/yKijwkz')

@bot.message_handler(func=lambda message: message.text == "9-11 –∫–ª–∞—Å—Å")
def nine_to_eleven(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("9A")
    button2 = types.KeyboardButton("10–ê")
    button3 = types.KeyboardButton("11–ê")
    button5 = types.KeyboardButton("9–ë")
    button6 = types.KeyboardButton("10–ë")
    button7 = types.KeyboardButton("11–ë")
    back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(button1, button2, button3, button5, button6, button7, back)
    bot.send_message(message.chat.id, text="...", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
@bot.message_handler(func=lambda message: message.text in CLASS_SCHEDULES)
def handle_class_schedule(message):
    photo_url = CLASS_SCHEDULES[message.text]
    if photo_url != "https://imgur.com/undefined":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É
        bot.send_photo(message.chat.id, photo_url)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(non_stop=True)

# –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
@app.route('/')
def home():
    return "Hello from Flask"

# –†–æ—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
@app.route('/set_webhook')
def set_webhook():
    bot.remove_webhook()
    webhook_url = f'https://soniaai331.pythonanywhere.com/{bot.token}'
    bot.set_webhook(url=webhook_url)
    return "–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram
@app.route(f'/{bot.token}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.json)
    bot.process_new_updates([update])
    return 'ok', 200

if __name__ == '__main__':
    app.run()